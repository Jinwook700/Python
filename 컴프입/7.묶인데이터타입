리스트(List) : korea = ["Korea", 'KOR', 5, 8, 4]
-언제든지 데이터 추가, 삽입, 삭제 가능 (mutable)
-요소의 순서가 있음 -> index 이용하여 접근 가능
- 데이터를 연속적인 메모리 공간에 저장하고, 각 요소는 인덱스를 이용하여
임의 접근 할 수 있는 가장 많이 쓰이는 기본적인 자료구조

l1 = list(range(1,4)) or [1,2,3,4]
l1[0] #인덱싱 접근
l1.append('5'), l1.insrt(1.4) #삽입
del l1[3] or l1.remove('3') or l1.pop(3) : 삭제하면서 반환까 #제거
l1[(시작값):(끝값+1)(:증가값)] #list 추출하기
l1.sort() : 오름차순, l1.sort(reverse=True) : 내림차순, len(l1), sum(l1)

튜플(Tuple)  : position = (3.14, -5, 7.5)
-생성된 데이터는 추가, 삽입, 삭제 불가능
-요소의 순서가 있음 -> index 이용하여 접근 가능

t=tupe() or t1 = (1,2,3,4)

문자열(String) : Course = "Python"
-생성된 데이터는 추가, 삽입, 삭제 불가능
-요소가 순서가 있음 -> index 이용하여 접근 가능

사전(Dictionary) : 
-언제든지 데이터를 추가, 삽입, 삭제하는 것이 가능
-요소가 순서가 없음
-쌍으로 이루어진 데이터, 다양한 속성을 가지는 하나의 객체를 관리할 때 유용
-데이터가 key와 value로 구성 key:value -> 삽입,삭제,탐색이 매우 빠른 자료구조

d = dict() or d = {'one':1, 'two':2, 'three':3}
d1['one'], d1.get('one')
d1.keys(), d1.values(), d1.items()
d1.update(d2) #추가하기
del d1['one] or d1.pop('one') #삭제하기

집합(Set): odds = {1, 3, 5, 7, 9}
-언제든지 데이터를 추가, 삽입, 삭제하는 것이 가능
-요소 순서가 없음


멤버 연산자 : int, not in
문자열, 리스트, 튜플 같은 자료구조의 내부에포함되어있는가를 True, False로 반환


s={} 는 사용불가능
s = set() or s1 = {1,2,3,4}
s1.add(5) #추가하기
s1.discard(4) #삭제하기
s1.union(s3), s1.difference(s3), s1.intersection(s3) #합,차,교집합
