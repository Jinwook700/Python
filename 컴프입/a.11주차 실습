[001]
Description

1. 아래와 같은 기능을 가지는 Counter 클래스를 정의하세요.

class Counter:
    def __init__(self, number): 
        #__number 속성값 지정하는 초기화메소드
                #number의 디폴트 매개변수 값은 0
          #number가 100이상이 되거나 -1이하가 되면 __number은 0을 초기값으로 가짐
    def __str__(self):
        #"C(number)"와 같이 출력하는 특수메소드
    def __add__(self, other):
        #Counter 클래스의 인스턴스 c1, c2를 만들었을 때, 
        c1 + c2 연산을 통해 c1의 __number와 c2의 __number의 합을 __number로 가지는
        Counter 인스턴스를 반환하는 특수메소드
            #이때, __number가 100 이상이 되면 0으로 초기화 됨
    def __sub__(self, other):
        #Counter 클래스의 인스턴스 c1, c2를 만들었을 때, 
        c1 - c2 연산을 통해 c1의 __number와 c2의 __number의 차를 __number로 가지는 
        Counter 인스턴스를 반환하는 특수메소드
            #이때, __number가 -1 이하가 되면 0으로 초기화 됨
    def reset(self):
        #__number를 0으로 초기화하는 메소드
    def inc(self):
        #__number를 1 증가시키는 메소드
            #__number가 100이상의 값이 되면 0으로 초기화 됨
    def dec(self):
        #__number를 1 감소시키는 메소드
            #__number가 -1이하의 값이 되면 0으로 초기화 됨

2. c1, c2 라는 이름의 인스턴스를 생성하여 작성한 아래의 예제코드를 실행하여Counter클래스를 잘 정의했음을 보이세요.

n1 = int(input()) #PNU OJ 입력

c1 = Counter(n1)
c1.inc()
print('c1=',c1)

c2 = Counter()
c2.inc()
c2.inc()
c2.dec()
print('c2=',c2)
c2.reset()
print('c2=',c2)

n2 = int(input()) #PNU OJ 입력
n3 = int(input()) #PNU OJ 입력

c1 = Counter(n2)
c2 = Counter(n3)
c3 = c1 + c2
c4 = c1 - c2
print('c3=',c3)
print('c4=',c4)

Input
첫번째 줄에 n1, 두번째 줄에 n2, 세번째 줄에 n3가 입력됩니다.

Output
n1 = 10, n2 = 50, n3 = 60인 경우 출력은 아래와 같습니다.

c1= C(11)
c2= C(1)
c2= C(0)
c3= C(0)
c4= C(0)

[Code]


[002]
Description

1. 아래와 같은 기능을 가지는 BankAccount 클래스를 정의하세요.

class BankAccount:
    def __init__(self, name, account, balance):
     #속성값을 초기화 하는 메소드
        #__name : 계좌 주인의 이름을 문자열 형으로 저장
        #__account : 계좌 번호 "1234-5678"과 같은 문자열 형으로 저장
        #__balance : 계좌의 잔액을 int 형으로 저장
            #balance의 디폴트 매개변수 값은 0
    def __str__(self):
     #"name의 계좌 account의 잔고는 balance원 입니다."와 같이 출력하는 특수메소드
    def deposit(self, money):
     #money 만큼의 돈을 balance에 추가하고 아래의 출력문을 출력하는 메소드
        #출력문 : money원이 입금되었습니다. 잔고는 balance입니다.
    def withdraw(self, money):
     #money 만큼의 돈이 balance에서 빠져나가고 아래의 출력문을 출력하는 메소드
        #출력문 : money원이 출금되었습니다. 잔고는 balance입니다.
     #만일 balance가 money보다 작으면 돈이 빠져나가지 않고, 아래의 출력문을 출력하는 메소드
        #출력문 : 계좌 잔고는 balance원으로 인출 요구 금액 money보다 작습니다.
        
2. account1 라는 이름의 인스턴스를 생성하여 작성한 아래의 예제코드를 실행하여
BankAccount 클래스를 잘 정의했음을 보이세요.

name = input() #PNU OJ 입력
account = input() #PNU OJ 입력
n1 = int(input()) #PNU OJ 입력
n2 = int(input()) #PNU OJ 입력
n3 = int(input()) #PNU OJ 입력

account1 = BankAccount(name,account)
print(account1)
account1.deposit(n1)
print(account1)
account1.withdraw(n2)
print(account1)
account1.withdraw(n3)

Input
첫번째 줄에 name, 두번째 줄에 account, 세번째 줄부터 다섯번째 줄까지 n1, n2, n3가 입력됩니다.

Output
name = '홍길동', account = '1234-0001', n1 = 2000, n2 = 500, n3 = 5000인 경우 출력은 아래와 같습니다.

홍길동의 계좌 1234-0001의 잔고는 0원 입니다.
2000원이 입금되었습니다. 잔고는 2000입니다.
홍길동의 계좌 1234-0001의 잔고는 2000원 입니다.
500원이 출금되었습니다. 잔고는 1500입니다.
홍길동의 계좌 1234-0001의 잔고는 1500원 입니다.
계좌 잔고는 1500원으로 인출 요구 금액 5000보다 작습니다.

[Code]


[003]
Description

1. 아래와 같은 기능을 가지는 Student 클래스를 정의하세요.

class Student:
    def __init__(self, name, student_id, korean_quiz, math_quiz, science_quiz):
        #속성값을 초기화 하는 메소드
        #__name : 학생의 이름을 문자열 형으로 저장
        #__student_id : 학번 20200001과 같은 8자리 문자열 형으로 저장
        #__korean_quiz : 학생의 국어 퀴즈 점수를 정수형으로 저장
        #__math_quiz : 학생의 수학 퀴즈 점수를 정수형으로 저장
        #__science_quiz : 학생의 과학 퀴즈 점수를 정수형으로 저장
            #korean_quiz, math_quiz, science_quiz의 디폴트 매개변수 값은 0
    def __str__(self):
     #여러줄에 걸친 아래의 출력문을 출력하는 특수메소드
        #이름: name, 학번: student_id
     #국어성적: korean_quiz, 수학성적: math_quiz, 과학성적: science_quiz의
        #합계: total_score, 평균: avg_score
    def set_korean_quiz(self, score):
        #학생의 국어 퀴즈 점수를 설정하는 메소드
    def set_math_quiz(self, score):
        #학생의 수학 퀴즈 점수를 설정하는 메소드
    def set_science_quiz(self, score):
        #학생의 과학 퀴즈 점수를 설정하는 메소드
    def get_total_score(self):
        #학생의 전체 퀴즈 점수의 합을 반환하는 메소드
    def get_avg_score(self):
        #학생의 퀴즈 점수의 평균을 반환하는 메소드
        
2. student 라는 이름의 인스턴스를 생성하여 작성한 아래의 예제코드를 실행하세요.

name = input() #PNU OJ 입력
student_id = input() #PNU OJ 입력

student = Student(name, student_id)

korean_quiz = int(input()) #PNU OJ 입력
math_quiz = int(input()) #PNU OJ 입력
science_quiz = int(input()) #PNU OJ 입력

student.set_korean_quiz(korean_quiz)
student.set_math_quiz(math_quiz)
student.set_science_quiz(science_quiz)
print(student)

Input
첫번째 줄에 name, 두번째 줄에 student_id, 
세번째 줄부터 다섯번째 줄까지 korean_quiz, math_quiz, science_quiz가 입력됩니다.

Output
name = '홍길동',student_id = '20200012',korean_quiz = 85,math_quiz = 90,science_quiz = 95 인 경우 
출력은 아래와 같습니다.

이름: 홍길동, 학번: 20200012
국어성적: 85, 수학성적: 90, 과학성적: 95
합계: 270, 평균: 90.0

[Code]


[004]
1. 아래와 같은 기능을 가지는 TV 클래스를 정의하세요.

class TV:
    #아래의 클래스 변수를 가짐
    #MIN_VOLUME : 볼륨의 최솟값으로 0이라는 상수
    #MAX_VOLUME : 볼륨의 최댓값으로 20이라는 상수
    #MIN_CHANNEL : 채널의 최솟값으로 0이라는 상수
    #MAX_CHANNEL : 채널의 최댓값으로 200이라는 상수

    def __init__(self, volume=5, channel=0, is_on=False):
        #속성값을 초기화하는 메소드
        #__volume : 0에서 20까지의 볼륨 값을 가짐
            #volume의 디폴트 매개변수 값은 5
        #__channel : 0에서 200까지의 채널 값을 가짐
            #channel의 디폴트 매개변수 값은 0
        #__is_on : 켜짐 상태이면 True, 꺼짐 상태이면 False 값을 가짐
            #is_on의 디폴트 매개변수 값은 False
    def __str__(self):
        #TV가 꺼짐 상태일 경우, "TV가 꺼짐 상태입니다." 를 출력하는 특수메소드
        #TV가 켜짐 상태일 경우, "볼륨 = volume, 채널 = channel" 를 출력하는 특수메소드

    def toggle_power(self):
        #TV가 꺼짐 상태일 경우 켜짐 상태로, 켜짐 상태일 경우 꺼짐 상태로 변환하는 메소드
        
    def set_channel(self, channel):
        #채널을 설정하는 메소드
        #이때, 채널의 값이 MIN_CHANNEL이상 MAX_CHANNEL이하의 값이 아닌 경우 "채널 오류"를 출력하는 메소드
    def set_volume(self, volume):
        #볼륨을 설정하는 메소드
        #이때, 볼륨의 값이 MIN_VOLUME이상 MAX_VOLUME이하의 값이 아닌 경우 "볼륨 오류"를 출력하는 메소드

    def volume_up(self):
        #볼륨 값을 1 증가시키는 메소드로 최댓값은 MAX_VOLUME
    def volume_down(self):
        #볼륨 값을 1 감소시키는 메소드로 최솟값은 MIN_VOLUME

    def channel_up(self):
        #채널 값을 1 증가시키는 메소드로 최댓값은 MAX_CHANNEL
    def channel_down(self):
        #채널 값을 1 감소시키는 메소드로 최솟값은 MIN_CHANNEL
        
2. my_tv, your_tv라는 이름의 인스턴스를 생성하여 작성한 아래의 예제코드를 실행하여
TV 클래스를 잘 정의했음을 보이세요.

v1 = int(input()) #PNU OJ 입력
c1= int(input()) #PNU OJ 입력

my_tv = TV()
print(my_tv)
my_tv.toggle_power()
print(my_tv)
my_tv.set_volume(v1)
print(my_tv)
my_tv.set_channel(c1)
print(my_tv)
my_tv.volume_up()
my_tv.channel_up()
print(my_tv)

v2= int(input()) #PNU OJ 입력
c2= int(input()) #PNU OJ 입력

your_tv = TV(v2,c2)
print(your_tv)
your_tv.toggle_power()
print(your_tv)
your_tv.volume_down()
your_tv.channel_down()
print(your_tv)

Input
첫번째 줄에 v1, 두번째 줄에 c1, 세번째 줄에 v2, 네번째 줄에 c2가 입력됩니다.

Output
v1 = 18, c1 = 45, v2 =20, c2 = 200의 경우 출력은 아래와 같습니다.

TV가 꺼짐 상태입니다.
볼륨 = 5, 채널 = 0
볼륨 = 18, 채널 = 0
볼륨 = 18, 채널 = 45
볼륨 = 19, 채널 = 46
TV가 꺼짐 상태입니다.
볼륨 = 20, 채널 = 200
볼륨 = 19, 채널 = 199

[Code]
